openapi: 3.0.0
info:
  title: brew-note api
  version: 0.0.1
servers:
- url: /
tags:
- description: Brew Note 関連のAPI
  name: brew-note
paths:
  /me:
    get:
      description: ログイン中のUser情報を返します
      operationId: getProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ok
        "500":
          description: InternalServerError
      security:
      - Brew-Note-Auth-Token: []
      summary: Get Profile
      tags:
      - brew-ntoe
  /users:
    get:
      description: user一覧を取得します。
      operationId: getUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: ok
        "500":
          description: InternalServerError
      summary: Get Users
      tags:
      - brew-ntoe
  /beans:
    get:
      description: bean一覧を取得します。
      operationId: getBeans
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bean'
                type: array
          description: ok
        "500":
          description: Internal Server Error
      summary: Get Beans
      tags:
      - brew-note
    post:
      description: Bean情報を登録します
      operationId: createBean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBean'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bean'
          description: ok
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create Bean
      tags:
      - brew-note
components:
  schemas:
    User:
      example:
        name: name
        nickname: nickname
        id: id
        email: email
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        nickname:
          type: string
    Bean:
      example:
        roastLevel:
          level: 6.027456183070403
          name: name
          id: 0.8008281904610115
        productionArea: productionArea
        kind: kind
        price: 1.4658129805029452
        id: id
        beanId: beanId
      properties:
        id:
          type: string
        beanId:
          type: string
        productionArea:
          type: string
        kind:
          type: string
        roastLevel:
          $ref: '#/components/schemas/RoastLevel'
        price:
          format: double
          nullable: true
          type: number
      required:
      - beanId
      - id
      - kind
      - price
      - productionArea
      - roastId
    CreateBean:
      example:
        productionArea: productionArea
        kind: kind
        price: 6
        gram: 1
        roastId: 0
      properties:
        productionArea:
          type: string
        kind:
          type: string
        roastId:
          type: integer
        price:
          type: integer
        gram:
          type: integer
      required:
      - kind
      - productionArea
      - roastId
      type: object
    RoastLevel:
      example:
        level: 6.027456183070403
        name: name
        id: 0.8008281904610115
      properties:
        id:
          type: number
        level:
          type: number
        name:
          type: string
      required:
      - id
      - level
      - name

/*
brew-note api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Recipe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Recipe{}

// Recipe struct for Recipe
type Recipe struct {
	Id float32 `json:"id"`
	ExtractionEquipment string `json:"extractionEquipment"`
	CoffeeType string `json:"coffeeType"`
	Steps []RecipeStep `json:"steps"`
}

// NewRecipe instantiates a new Recipe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipe(id float32, extractionEquipment string, coffeeType string, steps []RecipeStep) *Recipe {
	this := Recipe{}
	this.Id = id
	this.ExtractionEquipment = extractionEquipment
	this.CoffeeType = coffeeType
	this.Steps = steps
	return &this
}

// NewRecipeWithDefaults instantiates a new Recipe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeWithDefaults() *Recipe {
	this := Recipe{}
	return &this
}

// GetId returns the Id field value
func (o *Recipe) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Recipe) SetId(v float32) {
	o.Id = v
}

// GetExtractionEquipment returns the ExtractionEquipment field value
func (o *Recipe) GetExtractionEquipment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtractionEquipment
}

// GetExtractionEquipmentOk returns a tuple with the ExtractionEquipment field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetExtractionEquipmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtractionEquipment, true
}

// SetExtractionEquipment sets field value
func (o *Recipe) SetExtractionEquipment(v string) {
	o.ExtractionEquipment = v
}

// GetCoffeeType returns the CoffeeType field value
func (o *Recipe) GetCoffeeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CoffeeType
}

// GetCoffeeTypeOk returns a tuple with the CoffeeType field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetCoffeeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CoffeeType, true
}

// SetCoffeeType sets field value
func (o *Recipe) SetCoffeeType(v string) {
	o.CoffeeType = v
}

// GetSteps returns the Steps field value
func (o *Recipe) GetSteps() []RecipeStep {
	if o == nil {
		var ret []RecipeStep
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetStepsOk() ([]RecipeStep, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steps, true
}

// SetSteps sets field value
func (o *Recipe) SetSteps(v []RecipeStep) {
	o.Steps = v
}

func (o Recipe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Recipe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["extractionEquipment"] = o.ExtractionEquipment
	toSerialize["coffeeType"] = o.CoffeeType
	toSerialize["steps"] = o.Steps
	return toSerialize, nil
}

type NullableRecipe struct {
	value *Recipe
	isSet bool
}

func (v NullableRecipe) Get() *Recipe {
	return v.value
}

func (v *NullableRecipe) Set(val *Recipe) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipe) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipe(val *Recipe) *NullableRecipe {
	return &NullableRecipe{value: val, isSet: true}
}

func (v NullableRecipe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



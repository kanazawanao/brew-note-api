/*
brew-note api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoastLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoastLevel{}

// RoastLevel struct for RoastLevel
type RoastLevel struct {
	Id float32 `json:"id"`
	Level float32 `json:"level"`
	Name string `json:"name"`
}

// NewRoastLevel instantiates a new RoastLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoastLevel(id float32, level float32, name string) *RoastLevel {
	this := RoastLevel{}
	this.Id = id
	this.Level = level
	this.Name = name
	return &this
}

// NewRoastLevelWithDefaults instantiates a new RoastLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoastLevelWithDefaults() *RoastLevel {
	this := RoastLevel{}
	return &this
}

// GetId returns the Id field value
func (o *RoastLevel) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoastLevel) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoastLevel) SetId(v float32) {
	o.Id = v
}

// GetLevel returns the Level field value
func (o *RoastLevel) GetLevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *RoastLevel) GetLevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *RoastLevel) SetLevel(v float32) {
	o.Level = v
}

// GetName returns the Name field value
func (o *RoastLevel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoastLevel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoastLevel) SetName(v string) {
	o.Name = v
}

func (o RoastLevel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoastLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["level"] = o.Level
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableRoastLevel struct {
	value *RoastLevel
	isSet bool
}

func (v NullableRoastLevel) Get() *RoastLevel {
	return v.value
}

func (v *NullableRoastLevel) Set(val *RoastLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableRoastLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableRoastLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoastLevel(val *RoastLevel) *NullableRoastLevel {
	return &NullableRoastLevel{value: val, isSet: true}
}

func (v NullableRoastLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoastLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
brew-note api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipeStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeStep{}

// RecipeStep struct for RecipeStep
type RecipeStep struct {
	Id float32 `json:"id"`
	StepNumber float32 `json:"stepNumber"`
	Memo string `json:"memo"`
	ExtractionTemperature float32 `json:"extractionTemperature"`
	Seconds float32 `json:"seconds"`
}

// NewRecipeStep instantiates a new RecipeStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeStep(id float32, stepNumber float32, memo string, extractionTemperature float32, seconds float32) *RecipeStep {
	this := RecipeStep{}
	this.Id = id
	this.StepNumber = stepNumber
	this.Memo = memo
	this.ExtractionTemperature = extractionTemperature
	this.Seconds = seconds
	return &this
}

// NewRecipeStepWithDefaults instantiates a new RecipeStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeStepWithDefaults() *RecipeStep {
	this := RecipeStep{}
	return &this
}

// GetId returns the Id field value
func (o *RecipeStep) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecipeStep) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecipeStep) SetId(v float32) {
	o.Id = v
}

// GetStepNumber returns the StepNumber field value
func (o *RecipeStep) GetStepNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StepNumber
}

// GetStepNumberOk returns a tuple with the StepNumber field value
// and a boolean to check if the value has been set.
func (o *RecipeStep) GetStepNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepNumber, true
}

// SetStepNumber sets field value
func (o *RecipeStep) SetStepNumber(v float32) {
	o.StepNumber = v
}

// GetMemo returns the Memo field value
func (o *RecipeStep) GetMemo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memo
}

// GetMemoOk returns a tuple with the Memo field value
// and a boolean to check if the value has been set.
func (o *RecipeStep) GetMemoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memo, true
}

// SetMemo sets field value
func (o *RecipeStep) SetMemo(v string) {
	o.Memo = v
}

// GetExtractionTemperature returns the ExtractionTemperature field value
func (o *RecipeStep) GetExtractionTemperature() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExtractionTemperature
}

// GetExtractionTemperatureOk returns a tuple with the ExtractionTemperature field value
// and a boolean to check if the value has been set.
func (o *RecipeStep) GetExtractionTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtractionTemperature, true
}

// SetExtractionTemperature sets field value
func (o *RecipeStep) SetExtractionTemperature(v float32) {
	o.ExtractionTemperature = v
}

// GetSeconds returns the Seconds field value
func (o *RecipeStep) GetSeconds() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value
// and a boolean to check if the value has been set.
func (o *RecipeStep) GetSecondsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seconds, true
}

// SetSeconds sets field value
func (o *RecipeStep) SetSeconds(v float32) {
	o.Seconds = v
}

func (o RecipeStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["stepNumber"] = o.StepNumber
	toSerialize["memo"] = o.Memo
	toSerialize["extractionTemperature"] = o.ExtractionTemperature
	toSerialize["seconds"] = o.Seconds
	return toSerialize, nil
}

type NullableRecipeStep struct {
	value *RecipeStep
	isSet bool
}

func (v NullableRecipeStep) Get() *RecipeStep {
	return v.value
}

func (v *NullableRecipeStep) Set(val *RecipeStep) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeStep) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeStep(val *RecipeStep) *NullableRecipeStep {
	return &NullableRecipeStep{value: val, isSet: true}
}

func (v NullableRecipeStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



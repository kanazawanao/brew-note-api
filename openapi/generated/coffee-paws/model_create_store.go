/*
coffee-paws api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStore{}

// CreateStore struct for CreateStore
type CreateStore struct {
	Name string `json:"name"`
	StoreType string `json:"storeType"`
	Address string `json:"address"`
	Url string `json:"url"`
}

// NewCreateStore instantiates a new CreateStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStore(name string, storeType string, address string, url string) *CreateStore {
	this := CreateStore{}
	this.Name = name
	this.StoreType = storeType
	this.Address = address
	this.Url = url
	return &this
}

// NewCreateStoreWithDefaults instantiates a new CreateStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStoreWithDefaults() *CreateStore {
	this := CreateStore{}
	return &this
}

// GetName returns the Name field value
func (o *CreateStore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateStore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateStore) SetName(v string) {
	o.Name = v
}

// GetStoreType returns the StoreType field value
func (o *CreateStore) GetStoreType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreType
}

// GetStoreTypeOk returns a tuple with the StoreType field value
// and a boolean to check if the value has been set.
func (o *CreateStore) GetStoreTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreType, true
}

// SetStoreType sets field value
func (o *CreateStore) SetStoreType(v string) {
	o.StoreType = v
}

// GetAddress returns the Address field value
func (o *CreateStore) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CreateStore) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CreateStore) SetAddress(v string) {
	o.Address = v
}

// GetUrl returns the Url field value
func (o *CreateStore) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateStore) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateStore) SetUrl(v string) {
	o.Url = v
}

func (o CreateStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["storeType"] = o.StoreType
	toSerialize["address"] = o.Address
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableCreateStore struct {
	value *CreateStore
	isSet bool
}

func (v NullableCreateStore) Get() *CreateStore {
	return v.value
}

func (v *NullableCreateStore) Set(val *CreateStore) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStore) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStore(val *CreateStore) *NullableCreateStore {
	return &NullableCreateStore{value: val, isSet: true}
}

func (v NullableCreateStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


